{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Lo Shu Magic Square is a grid with 3 rows and 3 columns, shown in Figure 7-8. The Lo Shu Magic Square has the following properties:\n",
    "The grid contains the numbers 1 through 9 exactly.\n",
    "\n",
    "The sum of each row, each column, and each diagonal all add up to the same number.\n",
    "\n",
    "This is shown in figure below.\n",
    "\n",
    "Write a function that accepts a two-dimensional list as an argument and determines whether the list is a Lo Shu Magic Square. Test the function in a program."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Congratz! Your square is a magic square!! :D \n"
     ]
    }
   ],
   "source": [
    "lst = [\n",
    "    [4,9,2],\n",
    "    [3,5,7],\n",
    "    [8,1,6]\n",
    "]\n",
    "\n",
    "flag_h = True\n",
    "flag_v = True\n",
    "flag_d = True\n",
    "def magic_square(lis):\n",
    "    sumline = 15\n",
    "    flag_h = hori(lis)\n",
    "    flag_v = vert(lis)\n",
    "    flag_d = dia(lis)\n",
    "    #print (flag_h)\n",
    "    #print (flag_v)\n",
    "    #print (flag_d)\n",
    "    if flag_h == True and flag_v == True and flag_d == True:\n",
    "        print ('Congratz! Your square is a magic square!!! :D ')\n",
    "    else:\n",
    "        print ('Sorry, not a magic square... ')\n",
    "        \n",
    "def hori(ls):   \n",
    "    for i in ls:\n",
    "        current1 = 0\n",
    "        for k in i:\n",
    "            current1+=k\n",
    "        #print(flag_checkh(current1))\n",
    "        if flag_checkh(current1) == False:\n",
    "            return False\n",
    "    return True\n",
    "                \n",
    "def vert(ls):\n",
    "    current3=0\n",
    "    for key,line in enumerate(ls):\n",
    "        if key == 0:\n",
    "            for each,value in enumerate(line):\n",
    "                if each == 0:\n",
    "                    current3+=value\n",
    "        if key == 1:\n",
    "            for each,value in enumerate(line):\n",
    "                if each == 0:\n",
    "                    current3+=value\n",
    "        if key == 2:\n",
    "            for each,value in enumerate(line):\n",
    "                if each == 0:\n",
    "                    current3+=value\n",
    "    #print (current3)\n",
    "    if flag_checkd(current3) == True:\n",
    "        current3=0\n",
    "        for key,line in enumerate(ls):\n",
    "            if key == 0:\n",
    "                for each,value in enumerate(line):\n",
    "                    if each == 1:\n",
    "                        current3+=value\n",
    "            if key == 1:\n",
    "                for each,value in enumerate(line):\n",
    "                    if each == 1:\n",
    "                        current3+=value\n",
    "            if key == 2:\n",
    "                for each,value in enumerate(line):\n",
    "                    if each == 1:\n",
    "                        current3+=value\n",
    "        #print(current3)\n",
    "        if flag_checkd(current3) == True:\n",
    "            current3=0\n",
    "            for key,line in enumerate(ls):\n",
    "                if key == 0:\n",
    "                    for each,value in enumerate(line):\n",
    "                        if each == 2:\n",
    "                            current3+=value\n",
    "                if key == 1:\n",
    "                    for each,value in enumerate(line):\n",
    "                        if each == 2:\n",
    "                            current3+=value\n",
    "                if key == 2:\n",
    "                    for each,value in enumerate(line):\n",
    "                        if each == 2:\n",
    "                            current3+=value\n",
    "            #print (current3)\n",
    "            return True\n",
    "        else:\n",
    "            return False\n",
    "    else: \n",
    "        return False\n",
    "\n",
    "#diagonal \n",
    "def dia(ls):\n",
    "    current3=0\n",
    "    for key,line in enumerate(ls):\n",
    "        if key == 0:\n",
    "            for each,value in enumerate(line):\n",
    "                if each == 0:\n",
    "                    current3+=value\n",
    "        if key == 1:\n",
    "            for each,value in enumerate(line):\n",
    "                if each == 1:\n",
    "                    current3+=value\n",
    "        if key == 2:\n",
    "            for each,value in enumerate(line):\n",
    "                if each == 2:\n",
    "                    current3+=value\n",
    "    #print (current3)\n",
    "    if flag_checkd(current3) == True:\n",
    "        current3=0\n",
    "        for key,line in enumerate(ls):\n",
    "            if key == 0:\n",
    "                for each,value in enumerate(line):\n",
    "                    if each == 2:\n",
    "                        current3+=value\n",
    "            if key == 1:\n",
    "                for each,value in enumerate(line):\n",
    "                    if each == 1:\n",
    "                        current3+=value\n",
    "            if key == 2:\n",
    "                for each,value in enumerate(line):\n",
    "                    if each == 0:\n",
    "                        current3+=value\n",
    "        return True\n",
    "        #print(current3)\n",
    "    else:\n",
    "        return False               \n",
    "\n",
    "def flag_checkh(n):\n",
    "    if n == 15:\n",
    "        flag_h = True\n",
    "    else:\n",
    "        flag_h = False\n",
    "    return flag_h\n",
    "def flag_checkv(n):\n",
    "    if n == 15:\n",
    "        flag_v = True\n",
    "    else:\n",
    "        flag_v = False\n",
    "    return flag_v\n",
    "def flag_checkd(n):\n",
    "    if n == 15:\n",
    "        flag_d = True\n",
    "    else:\n",
    "        flag_d = False\n",
    "    return flag_d\n",
    "\n",
    "magic_square(lst)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
